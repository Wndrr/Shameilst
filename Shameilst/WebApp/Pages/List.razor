@page "/List/{ListId:int}"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using WebApp.Data.Services.TaskListDataProvider
@inject TaskListDataProvider DataProvider

<UiMessageDisplayer/>

<h1 class="text-center">
    List @(_taskList?.Name ?? "XXX")
</h1>
<a class="btn btn-primary" href="Lists"><span class="oi oi-media-skip-backward"></span> Return to lists</a>

@if (_taskList != null)
{
    <EditForm OnValidSubmit="@Add" Model="@_taskCreationEditModel" class="col-lg-6 mx-auto">
        <div class="row">
            <div class="form-group col-lg-6">
                <label>@nameof(_taskCreationEditModel.Name)</label>
                <InputText @bind-Value="@_taskCreationEditModel.Name" class="form-control"/>
            </div>
            <div class="col-lg-6">
                <br/>
                <ValidationMessage For="@(() => _taskCreationEditModel.Name)"/>
            </div>
        </div>
        <div class="col-lg-12">
            <button class="btn btn-primary mx-auto" type="submit">Create a new task !</button>
        </div>
        <DataAnnotationsValidator/>
    </EditForm>
}

@if (_taskList?.Tasks != null && _taskList.Tasks.Any())
{
    <table class="table mt-4 col-lg-8 mx-auto">
        <tbody>
        @foreach (var task in _taskList.Tasks.OrderBy(t => t.IsClosed))
        {
            <tr>
                <td>
                    <a href="Task/@task.Id">
                        @if (task.IsClosed)
                        {
                            <del>@task.Name</del>
                            <span>(Closed)</span>
                        }
                        else
                        {
                            <text>@task.Name</text>
                        }
                    </a>
                </td>
                <td>
                    @{
                        var dueTimeSpan = task.DueDate.Subtract(DateTime.Now);
                        var dayTextValue = $"{dueTimeSpan:%d} day(s)";
                    }
                    @if (dueTimeSpan.Days == 0)
                    {
                        <span>due today</span>
                    }
                    else if (dueTimeSpan.Days > 0)
                    {
                        <span>due in @dayTextValue</span>
                    }
                    else
                    {
                        <span>due @dayTextValue ago</span>
                    }
                </td>
                <td>
                    <span class="oi oi-delete" @onclick="@(async () => await Remove(task.Id))"></span>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code
{
    [Parameter]
    public int ListId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private TaskListForUserModel _taskList;
    private async Task<ClaimsPrincipal> GetUser() => (await AuthenticationStateTask).User;

    private readonly TaskCreationEditModel _taskCreationEditModel = new TaskCreationEditModel();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Add()
    {
        await DataProvider.Add(await GetUser(), ListId, _taskCreationEditModel.Name);
        await Refresh();
        _taskCreationEditModel.Name = null;
    }

    private async Task Remove(int idOfListToRemove)
    {
        await DataProvider.Remove(await GetUser(), ListId, idOfListToRemove);
        await Refresh();
    }

    private async Task Refresh()
    {
        var user = await GetUser();
        if (user.Identity.IsAuthenticated)
            _taskList = await DataProvider.Get(user, ListId);
    }

    private class TaskCreationEditModel
    {
        [Required]
        public string Name { get; set; }
    }
}