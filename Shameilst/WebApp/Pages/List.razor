@page "/List/{ListId:int}"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using WebApp.Data.Services.TaskListDataProvider
@inject TaskListDataProvider DataProvider

<h1>
    List @(_taskList?.Name ?? "XXX")
</h1>
<a class="btn btn-primary" href="Lists">Return to lists</a>
<EditForm OnValidSubmit="@Add" Model="@_taskCreationEditModel">
    <div class="form-group">
        <label>@nameof(TaskCreationEditModel.Name)</label>
        <InputText @bind-Value="@_taskCreationEditModel.Name" class="form-control"/>
    </div>
    <button class="btn btn-primary" type="submit">Add list</button>
    <DataAnnotationsValidator/>
    <ValidationSummary/>
</EditForm>
@if (_taskList?.Tasks != null && _taskList.Tasks.Any())
{
    @foreach (var task in _taskList.Tasks.OrderBy(t => t.IsClosed))
    {
        <div>
            <a href="Task/@task.Id">
                @if (task.IsClosed)
                {
                    <del>@task.Name</del>
                }
                else
                {
                    <text>@task.Name</text>
                }
            </a>
            @{
                var dueTimeSpan = task.DueDate.Subtract(DateTime.Now);
                var dayTextValue = $"{dueTimeSpan:%d} day(s)";
            }
            @if (dueTimeSpan.Days == 0)
            {
                <span>due today</span>
            }
            else if (dueTimeSpan.Days > 0)
            {
                <span>due in @dayTextValue</span>
            }
            else
            {
                <span>due @dayTextValue ago</span>
            }
            <button class="btn btn-danger" @onclick="@(async () => await Remove(task.Id))">Remove</button>
        </div>
    }
}

@code
{
    [Parameter]
    public int ListId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private TaskListForUserModel _taskList;
    private async Task<ClaimsPrincipal> GetUser() => (await AuthenticationStateTask).User;

    private readonly TaskCreationEditModel _taskCreationEditModel = new TaskCreationEditModel();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Add()
    {
        await DataProvider.Add(await GetUser(), ListId, _taskCreationEditModel.Name);
        await Refresh();
        _taskCreationEditModel.Name = null;
    }

    private async Task Remove(int idOfListToRemove)
    {
        await DataProvider.Remove(await GetUser(), ListId, idOfListToRemove);
        await Refresh();
    }

    private async Task Refresh()
    {
        var user = await GetUser();
        if (user.Identity.IsAuthenticated)
            _taskList = await DataProvider.Get(user, ListId);
    }

    private class TaskCreationEditModel
    {
        [Required]
        public string Name { get; set; }
    }
}