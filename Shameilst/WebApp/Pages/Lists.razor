@page "/Lists"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using WebApp.Data.Services.Overview
@using WebApp.Data.Services.TaskLists
@inject TaskListsDataProvider DataProvider

<UiMessageDisplayer/>

<h1 class="text-center">
    Your lists
</h1>
<EditForm OnValidSubmit="@Add" Model="@_taskListCreationEditModel" class="col-lg-6 mx-auto">
    <div class="row">
        <div class="form-group col-lg-6">
            <label>@nameof(TaskListCreationEditModel.Name)</label>
            <InputText @bind-Value="@_taskListCreationEditModel.Name" class="form-control"/>
        </div>
        <div class="col-lg-6">
            <br/>
            <ValidationMessage For="@(() => _taskListCreationEditModel.Name)"/>
        </div>
    </div>
    <div class="col-lg-12">
        <button class="btn btn-primary mx-auto" type="submit">Create a new list !</button>
    </div>
    <DataAnnotationsValidator/>
</EditForm>
@if (_taskLists?.ListsOwnedByThisUser != null && _taskLists.ListsOwnedByThisUser.Any())
{
    <table class="table mt-4 col-lg-8 mx-auto">
        <tbody>
        @foreach (var list in _taskLists.ListsOwnedByThisUser)
        {
            <tr>
                <td>
                    <a href="List/@list.Id">@list.Name</a>
                </td>
                <td>
                    @list.OpenTasksCount open tasks out of @list.TotalTasksCount total
                </td>
                <td>
                    Shared with @list.ShareesCount <span class="oi oi-person"></span>
                </td>
                <td>
                    <span class="oi oi-delete" @onclick="@(async () => await Remove(list.Id))"></span>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@if (_taskLists?.ListsSharedWithThisUser != null && _taskLists.ListsSharedWithThisUser.Any())
{
    <h1 class="text-center">
        Lists shared with you
    </h1>
    <table class="table mt-4 col-lg-8 mx-auto">
        <tbody>
        @foreach (var list in _taskLists.ListsSharedWithThisUser)
        {
            <tr>
                <td>
                    <a href="List/@list.Id">@list.Name</a>
                </td>
                <td>
                    @list.OpenTasksCount open tasks out of @list.TotalTasksCount total
                </td>
                <td>
                    <span class="oi oi-delete" @onclick="@(async () => await Remove(list.Id))"></span>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private TaskListsForUserModel _taskLists;
    private async Task<ClaimsPrincipal> GetUser() => (await AuthenticationStateTask).User;

    private readonly TaskListCreationEditModel _taskListCreationEditModel = new TaskListCreationEditModel();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Add()
    {
        await DataProvider.Add(await GetUser(), _taskListCreationEditModel.Name);
        await Refresh();
        _taskListCreationEditModel.Name = null;
    }

    private async Task Remove(int idOfListToRemove)
    {
        await DataProvider.Remove(await GetUser(), idOfListToRemove);
        await Refresh();
    }

    private async Task Refresh()
    {
        var user = await GetUser();
        if (user.Identity.IsAuthenticated)
            _taskLists = await DataProvider.Get(user);
    }

    private class TaskListCreationEditModel
    {
        [Required]
        public string Name { get; set; }
    }
}