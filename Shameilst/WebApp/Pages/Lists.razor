@page "/Lists"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using WebApp.Data.Services.Overview
@using WebApp.Data.Services.TaskLists
@inject TaskListsDataProvider DataProvider

<h1>
    TASKS LISTS YAY
</h1>
<EditForm OnValidSubmit="@Add" Model="@_taskListCreationEditModel">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText @bind-Value="@_taskListCreationEditModel.Name" />
    <button class="btn btn-primary" type="submit">Add list</button>
</EditForm>
@if (_taskLists?.Lists != null && _taskLists.Lists.Any())
{
    @foreach (var list in _taskLists.Lists)
    {
        <div>
            <a href="List/@list.Id">@list.Name</a>
            <button class="btn btn-danger" @onclick="@(async () => await Remove(list.Id))">Remove</button>
        </div>
    }
}

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private TaskListsForUserModel _taskLists;
    private async Task<ClaimsPrincipal> GetUser() => (await AuthenticationStateTask).User;

    private readonly TaskListCreationEditModel _taskListCreationEditModel = new TaskListCreationEditModel();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Add()
    {
        await DataProvider.Add(await GetUser(), _taskListCreationEditModel.Name);
        await Refresh();
        _taskListCreationEditModel.Name = null;
    }

    private async Task Remove(int idOfListToRemove)
    {
        await DataProvider.Remove(await GetUser(), idOfListToRemove);
        await Refresh();
    }

    private async Task Refresh()
    {
        var user = await GetUser();
        if (user.Identity.IsAuthenticated)
            _taskLists = await DataProvider.Get(user);
    }

    private class TaskListCreationEditModel
    {
        [Required]
        public string Name { get; set; }
    }
}