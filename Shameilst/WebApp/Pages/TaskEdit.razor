@page "/Task/{TaskId:int}"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Http.Extensions
@using WebApp.Data.Services.Task
@using WebApp.Data.Services.TaskListDataProvider
@inject NavigationManager NavigationManager
@inject TaskDataProvider DataProvider
@inject TaskListDataProvider TaskListDataProvider

<UiMessageDisplayer/>

<h1 class="text-center">
    @(_task?.Name ?? "XXX")
</h1>

<a class="btn btn-primary" href="List/@_task?.ParentListId"><span class="oi oi-media-skip-backward"></span>Return to list @_task?.ParentListName</a>

@if (_task == null)
{
    <div class="text-center">
        Loading ...
    </div>
}
else
{
    <EditForm OnValidSubmit="@Update" Model="@_task" class="col-lg-6 mx-auto">
        <DataAnnotationsValidator/>
        <div class="row">
            <div class="form-group col-lg-6">
                <label>@nameof(TaskForUserModel.Name)</label>
                <InputText @bind-Value="@_task.Name" class="form-control" disabled="@_isReadonly"/>
            </div>
            <div class="col-lg-6">
                <br/>
                <ValidationMessage For="@(() => _task.Name)"/>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-lg-6">
                <label>@nameof(TaskForUserModel.DueDate)</label>
                <InputDate @bind-Value="@_task.DueDate" class="form-control" disabled="@_isReadonly"/>
            </div>
            <div class="col-lg-6">
                <br/>
                <ValidationMessage For="@(() => _task.DueDate)"/>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-lg-6">
                <label>@nameof(TaskForUserModel.IsClosed)</label>
                <InputCheckbox @bind-Value="@_task.IsClosed" class="form-control" disabled="@_isReadonly"/>
            </div>
            <div class="col-lg-6">
                <br/>
                <ValidationMessage For="@(() => _task.IsClosed)"/>
            </div>
        </div>
            <div class="row">
                <div class="form-group col-lg-6">
                    <label>@nameof(TaskForUserModel.PrideShameValue)</label>
                    <InputNumber @bind-Value="@_task.PrideShameValue" class="form-control" disabled="@(!_isReadonly)"/>
                </div>
                <div class="col-lg-6">
                    <br/>
                    <ValidationMessage For="@(() => _task.PrideShameValue)"/>
                </div>
            </div>
        <div class="col-lg-12">
            <button class="btn btn-primary mx-auto" type="submit">Update task !</button>
            @if (!_isReadonly)
            {
                <button class="btn btn-danger mx-auto" type="button" @onclick="@Remove"><span class="oi oi-delete"></span> Remove</button>
            }
        </div>
    </EditForm>
}

@code
{
    [Parameter]
    public int TaskId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private TaskForUserModel _task;
    private async Task<ClaimsPrincipal> GetUser() => (await AuthenticationStateTask).User;
    private bool _isReadonly;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Remove()
    {
        await DataProvider.Remove(await GetUser(), TaskId);
        NavigationManager.NavigateTo($"List/{_task?.ParentListId}");
    }

    private async Task Update()
    {
        var user = await GetUser();
        var parentListId = await DataProvider.GetParentListIdForTask(user, TaskId);
        var isUpdatedBySharee = !(await TaskListDataProvider.UserOwnsThisList(user, parentListId));
        await DataProvider.Update(user, TaskId, _task, isUpdatedBySharee);
        await Refresh();
    }

    private async Task Refresh()
    {
        var user = await GetUser();
        if (user.Identity.IsAuthenticated)
        {
            var parentListId = await DataProvider.GetParentListIdForTask(user, TaskId);
            var userOwnsThisList = await TaskListDataProvider.UserOwnsThisList(user, parentListId);

            if (userOwnsThisList)
            {
                _task = await DataProvider.Get(user, TaskId);
            }
            else
            {
                _isReadonly = true;
                _task = await DataProvider.GetShared(user, TaskId);
            }
        }
    }
}

